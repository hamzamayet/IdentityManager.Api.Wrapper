﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using IdentityManagerAPIWrapper.Model;
using IdentityManagerAPIWrapper.Model.Roles;
using Refit;
using IdentityManagerAPIWrapper.Model.Users;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace IdentityManagerAPIWrapper.Services.Roles
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIRoleService : IRoleService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIRoleService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<RoleQueryResultResponse> GetAll(string filter,int start,int count)
        {
            var arguments = new object[] { filter,start,count };
            return (Task<RoleQueryResultResponse>) methodImpls["GetAll"](Client, arguments);
        }

        public virtual Task<RoleDetailResponse> Get(string subject)
        {
            var arguments = new object[] { subject };
            return (Task<RoleDetailResponse>) methodImpls["Get"](Client, arguments);
        }

        public virtual Task<CreateRoleResponse> Create(PropertyValue[] properties)
        {
            var arguments = new object[] { properties };
            return (Task<CreateRoleResponse>) methodImpls["Create"](Client, arguments);
        }

        public virtual Task Delete(string subject)
        {
            var arguments = new object[] { subject };
            return (Task) methodImpls["Delete"](Client, arguments);
        }

        public virtual Task SetProperty(string subject,string type,object value)
        {
            var arguments = new object[] { subject,type,value };
            return (Task) methodImpls["SetProperty"](Client, arguments);
        }

    }
}

namespace IdentityManagerAPIWrapper.Services.Users
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIUserService : IUserService
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIUserService(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<UserQueryResultResponse> GetAll(string filter,int start,int count)
        {
            var arguments = new object[] { filter,start,count };
            return (Task<UserQueryResultResponse>) methodImpls["GetAll"](Client, arguments);
        }

        public virtual Task<UserDetailResponse> Get(string subject)
        {
            var arguments = new object[] { subject };
            return (Task<UserDetailResponse>) methodImpls["Get"](Client, arguments);
        }

        public virtual Task<CreateUserResponse> Create(PropertyValue[] properties)
        {
            var arguments = new object[] { properties };
            return (Task<CreateUserResponse>) methodImpls["Create"](Client, arguments);
        }

        public virtual Task Delete(string subject)
        {
            var arguments = new object[] { subject };
            return (Task) methodImpls["Delete"](Client, arguments);
        }

        public virtual Task SetProperty(string subject,string type,object value)
        {
            var arguments = new object[] { subject,type,value };
            return (Task) methodImpls["SetProperty"](Client, arguments);
        }

        public virtual Task AddClaim(string subject,ClaimValue model)
        {
            var arguments = new object[] { subject,model };
            return (Task) methodImpls["AddClaim"](Client, arguments);
        }

        public virtual Task RemoveClaim(string subject,string type,string value)
        {
            var arguments = new object[] { subject,type,value };
            return (Task) methodImpls["RemoveClaim"](Client, arguments);
        }

        public virtual Task AddRole(string subject,string role)
        {
            var arguments = new object[] { subject,role };
            return (Task) methodImpls["AddRole"](Client, arguments);
        }

        public virtual Task RemoveRole(string subject,string role)
        {
            var arguments = new object[] { subject,role };
            return (Task) methodImpls["RemoveRole"](Client, arguments);
        }

    }
}


